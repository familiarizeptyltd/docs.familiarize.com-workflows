name: OpenHands

on:
  workflow_dispatch:
    inputs:
      # Use EITHER the template+profile path or a raw prompt file.
      # If 'prompt_template' is non-empty, we'll render into .agent/rendered_prompt.md
      # Otherwise we use 'prompt_file' directly.
      prompt_template:
        description: "TEMPLATE path under docs_repo (e.g., prompts/country-topic-template.md). Leave empty to use raw 'prompt_file'."
        required: false
        default: "prompts/country-topic-template.md"

      profile_key:
        description: "Country profile key (e.g., UAE, SG, UK). Ignored if template is empty."
        required: false
        default: "UAE"

      prompt_file:
        description: "RAW prompt path under docs_repo (e.g., prompts/uae-pages.md). Used only when template is empty."
        required: false
        default: "prompts/uae-pages.md"

      branch_name:
        description: "Target branch (created if missing)"
        required: true
        default: "agent/openhands-run"

      llm_provider:
        description: "LLM provider: openai | openai_compat | grok"
        required: true
        default: "openai"

      llm_model:
        description: "Model name (e.g., gpt-4o-mini, gpt-4.1-mini, grok-2-mini, or your self-hosted model id)"
        required: true
        default: "gpt-4o-mini"

      browsing_enabled:
        description: "Enable in-agent web browsing?"
        required: true
        default: "true"

      web_search_enabled:
        description: "Enable web search?"
        required: true
        default: "true"

      commit_mode:
        description: "direct = push to branch, pr = open PR"
        required: true
        default: "pr"

      run_mode:
        description: "docker | python | auto (docker first, fallback to python)"
        required: true
        default: "docker"

jobs:
  openhands:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      # Repo paths
      REPO_DIR: docs_repo
      AGENT_LOG_DIR: openhands_run

      # Inputs as env
      PROMPT_TEMPLATE: ${{ github.event.inputs.prompt_template }}
      PROFILE_KEY: ${{ github.event.inputs.profile_key }}
      RAW_PROMPT_FILE: ${{ github.event.inputs.prompt_file }}
      TARGET_BRANCH: ${{ github.event.inputs.branch_name }}
      LLM_PROVIDER: ${{ github.event.inputs.llm_provider }}
      LLM_MODEL: ${{ github.event.inputs.llm_model }}
      ENABLE_BROWSING: ${{ github.event.inputs.browsing_enabled }}
      ENABLE_SEARCH: ${{ github.event.inputs.web_search_enabled }}
      COMMIT_MODE: ${{ github.event.inputs.commit_mode }}
      RUN_MODE: ${{ github.event.inputs.run_mode }}

      # OpenHands container image (pin/tag if you like)
      OPENHANDS_IMAGE: ghcr.io/openhands-ai/openhands:latest

      # Target repo for PR creation
      TARGET_REPO: familiarizeptyltd/docs.familiarize.com

    steps:
      - name: Checkout workflows repo (public)
        uses: actions/checkout@v4

      - name: Checkout docs.familiarize.com (private)
        uses: actions/checkout@v4
        with:
          repository: familiarizeptyltd/docs.familiarize.com
          path: docs_repo
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          submodules: true

      - name: Setup Python (templating + optional python-mode)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install small deps
        run: |
          python -m pip install --upgrade pip
          pip install pygithub

      # -------------------------
      # Resolve template vs raw
      # -------------------------
      - name: Resolve prompt (template → raw fallback)
        run: |
          set -euo pipefail

          TEMPLATE_PATH="${REPO_DIR}/${PROMPT_TEMPLATE}"
          PROFILES_NEW="${REPO_DIR}/prompts/country-profiles.json"
          PROFILES_OLD="${REPO_DIR}/prompts/country_profiles.json"
          RAW_PATH="${REPO_DIR}/${RAW_PROMPT_FILE}"

          # Decide which profiles filename exists
          if   [ -f "${PROFILES_NEW}" ]; then PROFILES_PATH="${PROFILES_NEW}"
          elif [ -f "${PROFILES_OLD}" ]; then PROFILES_PATH="${PROFILES_OLD}"
          else PROFILES_PATH=""
          fi

          use_template=false
          if [ -n "${PROMPT_TEMPLATE}" ] && [ -f "${TEMPLATE_PATH}" ] && [ -n "${PROFILES_PATH}" ]; then
            use_template=true
          fi

          if $use_template; then
            echo "Using template: ${TEMPLATE_PATH} with profiles: ${PROFILES_PATH} (profile_key=${PROFILE_KEY})"
            python scripts/render_prompt.py \
              --profiles "${PROFILES_PATH}" \
              --profile-key "${PROFILE_KEY}" \
              --template   "${TEMPLATE_PATH}" \
              --output     "${REPO_DIR}/.agent/rendered_prompt.md"
            echo "PROMPT_FILE=.agent/rendered_prompt.md" >> "$GITHUB_ENV"
          else
            echo "Template/profiles missing. Falling back to RAW prompt: ${RAW_PATH}"
            if [ ! -f "${RAW_PATH}" ]; then
              echo "❌ Missing inputs. Expected one of:"
              echo "  - ${TEMPLATE_PATH} AND ( ${PROFILES_NEW} OR ${PROFILES_OLD} )"
              echo "  - ${RAW_PATH}"
              exit 1
            fi
            echo "PROMPT_FILE=${RAW_PROMPT_FILE}" >> "$GITHUB_ENV"
          fi

      - name: Validate prompt path
        run: |
          set -euo pipefail
          if [ ! -f "${REPO_DIR}/${PROMPT_FILE}" ]; then
            echo "❌ Prompt file not found: ${REPO_DIR}/${PROMPT_FILE}"
            exit 1
          fi

      - name: Configure Git user
        working-directory: ${{ env.REPO_DIR }}
        run: |
          git config user.name  "ci-agent"
          git config user.email "ci-agent@users.noreply.github.com"

      - name: Create/switch branch
        working-directory: ${{ env.REPO_DIR }}
        run: |
          set -euo pipefail
          if git rev-parse --verify "${TARGET_BRANCH}" >/dev/null 2>&1; then
            git checkout "${TARGET_BRANCH}"
          else
            git checkout -b "${TARGET_BRANCH}"
          fi

      # ================================
      #  Docker path (preferred / default)
      # ================================
      - name: Pull OpenHands image (fail loud)
        if: ${{ env.RUN_MODE == 'docker' || env.RUN_MODE == 'auto' }}
        run: |
          set -euo pipefail
          docker pull "${OPENHANDS_IMAGE}"

      - name: Launch OpenHands (Docker)
        id: docker
        if: ${{ env.RUN_MODE == 'docker' || env.RUN_MODE == 'auto' }}
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_COMPAT_API_KEY: ${{ secrets.OPENAI_COMPAT_API_KEY }}
          OPENAI_COMPAT_BASE_URL: ${{ secrets.OPENAI_COMPAT_BASE_URL }}
          GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        run: |
          set -euo pipefail

          # Map provider secrets to launcher
          case "${LLM_PROVIDER}" in
            openai)
              export OH_API_KIND="openai"
              export OH_API_KEY="${OPENAI_API_KEY:-}"
              ;;
            openai_compat)
              export OH_API_KIND="openai_compat"
              export OH_API_KEY="${OPENAI_COMPAT_API_KEY:-}"
              export OH_API_BASE="${OPENAI_COMPAT_BASE_URL:-}"
              ;;
            grok)
              export OH_API_KIND="grok"
              export OH_API_KEY="${GROK_API_KEY:-}"
              ;;
            *)
              echo "Unsupported LLM provider: ${LLM_PROVIDER}"
              exit 1
              ;;
          esac

          bash scripts/launch_openhands.sh \
            --image "${OPENHANDS_IMAGE}" \
            --repo-path "${REPO_DIR}" \
            --prompt-path "${REPO_DIR}/${PROMPT_FILE}" \
            --llm-kind "${OH_API_KIND}" \
            --llm-key "${OH_API_KEY:-}" \
            --llm-base "${OH_API_BASE:-}" \
            --llm-model "${LLM_MODEL}" \
            --enable-browsing "${ENABLE_BROWSING}" \
            --enable-search "${ENABLE_SEARCH}" \
            --logs "${AGENT_LOG_DIR}"

      # ================================
      #  Python fallback (or explicit)
      # ================================
      - name: Launch OpenHands (pip)
        if: ${{ env.RUN_MODE == 'python' || (env.RUN_MODE == 'auto' && steps.docker.outcome == 'failure') }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_COMPAT_API_KEY: ${{ secrets.OPENAI_COMPAT_API_KEY }}
          OPENAI_COMPAT_BASE_URL: ${{ secrets.OPENAI_COMPAT_BASE_URL }}
          GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install openhands
          python scripts/run_openhands.py \
            --repo-path "${REPO_DIR}" \
            --prompt-path "${REPO_DIR}/${PROMPT_FILE}" \
            --llm-provider "${LLM_PROVIDER}" \
            --llm-model "${LLM_MODEL}" \
            --enable-browsing "${ENABLE_BROWSING}" \
            --enable-search "${ENABLE_SEARCH}" \
            --logs "${AGENT_LOG_DIR}"

      - name: Show agent outputs
        if: always()
        run: |
          echo "------- Agent output dir -------"
          ls -la "${AGENT_LOG_DIR}" || true

      - name: Commit changes (if any)
        working-directory: ${{ env.REPO_DIR }}
        run: |
          set -euo pipefail
          git add -A
          if git diff --cached --quiet; then
            echo "ℹ️ No changes to commit."
            exit 0
          fi
          git commit -m "OpenHands agent: apply changes from ${PROMPT_FILE}"

      - name: Push branch
        working-directory: ${{ env.REPO_DIR }}
        env:
          GIT_ASKPASS: /bin/echo
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          set -euo pipefail
          git push --set-upstream origin "${TARGET_BRANCH}"

      - name: Create PR (if requested)
        if: ${{ github.event.inputs.commit_mode == 'pr' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          set -euo pipefail
          gh pr create \
            --repo "${TARGET_REPO}" \
            --head "${TARGET_BRANCH}" \
            --base "main" \
            --title "OpenHands: ${PROMPT_FILE}" \
            --body "$(printf "Automated changes by OpenHands agent.\n\nPrompt: \`%s\`\nBrowsing: \`%s\`, Search: \`%s\`\nModel: \`%s/%s\`" "${PROMPT_FILE}" "${ENABLE_BROWSING}" "${ENABLE_SEARCH}" "${LLM_PROVIDER}" "${LLM_MODEL}")" \
          || echo "ℹ️ PR may already exist or the branch already has an open PR."

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openhands-run-${{ github.run_id }}
          path: ${{ env.AGENT_LOG_DIR }}/
          if-no-files-found: warn
