name: OpenHands

on:
  workflow_dispatch:
    inputs:
      profile_key:
        description: Country/profile key (e.g. UAE)
        required: true
        default: UAE
      target_branch:
        description: Branch to push/PR against
        required: true
        default: main
      commit_mode:
        description: direct | pr
        required: true
        default: pr
      llm_provider:
        description: openai | openai_compat | grok
        required: true
        default: openai
      llm_model:
        description: e.g. gpt-4o-mini
        required: true
        default: gpt-4o-mini
      enable_browsing:
        description: true | false
        required: true
        default: "true"
      enable_search:
        description: true | false (requires Tavily key)
        required: true
        default: "true"
      prompt_template:
        description: Path to prompt template (in private repo)
        required: true
        default: prompts/country-topic-template.md
      raw_prompt_file:
        description: Raw prompt (optional, alternative to template)
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

env:
  TARGET_REPO: familiarizeptyltd/docs.familiarize.com
  REPO_DIR: docs_repo
  AGENT_LOG_DIR: openhands_run
  OPENHANDS_RUNTIME_IMAGE: docker.openhands.dev/openhands/runtime:0.60-nikolaik

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v4

      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          path: ${{ env.REPO_DIR }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          submodules: true

      - name: Set inputs → env
        run: |
          echo "PROFILE_KEY=${{ github.event.inputs.profile_key }}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ github.event.inputs.target_branch }}" >> $GITHUB_ENV
          echo "COMMIT_MODE=${{ github.event.inputs.commit_mode }}" >> $GITHUB_ENV
          echo "LLM_PROVIDER=${{ github.event.inputs.llm_provider }}" >> $GITHUB_ENV
          echo "LLM_MODEL=${{ github.event.inputs.llm_model }}" >> $GITHUB_ENV
          echo "ENABLE_BROWSING=${{ github.event.inputs.enable_browsing }}" >> $GITHUB_ENV
          echo "ENABLE_SEARCH=${{ github.event.inputs.enable_search }}" >> $GITHUB_ENV
          echo "PROMPT_TEMPLATE=${{ github.event.inputs.prompt_template }}" >> $GITHUB_ENV
          echo "RAW_PROMPT_FILE=${{ github.event.inputs.raw_prompt_file }}" >> $GITHUB_ENV

      - name: Render prompt from template + profiles
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install jinja2
          mkdir -p "${REPO_DIR}/.agent"
          # Simple Jinja renderer inline
          python - << 'PY'
          import json, os, pathlib
          from jinja2 import Template
          repo = os.environ["REPO_DIR"]
          profile_key = os.environ["PROFILE_KEY"]
          tpl_path = pathlib.Path(repo) / os.environ["PROMPT_TEMPLATE"]
          # NOTE: you renamed the file to country-profiles.json
          profiles_path = pathlib.Path(repo) / "prompts" / "country-profiles.json"
          out_path = pathlib.Path(repo) / ".agent" / "rendered_prompt.md"
          data = json.loads(profiles_path.read_text(encoding="utf-8"))
          ctx = data[profile_key]
          t = Template(tpl_path.read_text(encoding="utf-8"))
          out_path.write_text(t.render(**ctx), encoding="utf-8")
          print(f"Wrote {out_path}")
          PY
          echo "PROMPT_FILE=.agent/rendered_prompt.md" >> "$GITHUB_ENV"

      - name: Install uv (recommended by OpenHands docs)
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Pre-pull runtime container (faster cold start)
        run: docker pull "${OPENHANDS_RUNTIME_IMAGE}"

      - name: Prepare OpenHands config (optional Tavily search key)
        run: |
          set -euo pipefail
          mkdir -p .openhands
          # Write config.toml next to the working dir we will run from (repo root)
          cat > "${REPO_DIR}/config.toml" <<'TOML'
          [core]
          # If set, enables Tavily search engine
          # search_api_key = ""
          # Log all events for debugging
          log_all_events = true
          [agent]
          # Browsing can be allowed; the agent decides when to use it
          enable_browsing = true
          TOML
          if [ -n "${{ secrets.TAVILY_API_KEY || '' }}" ] && [ "${ENABLE_SEARCH}" = "true" ]; then
            # Inject Tavily key
            sed -i "s|# search_api_key = \"\"|search_api_key = \"${{ secrets.TAVILY_API_KEY }}\"|g" "${REPO_DIR}/config.toml"
          fi

      - name: Map LLM provider → env
        run: |
          set -euo pipefail
          case "${LLM_PROVIDER}" in
            openai)
              echo "LLM_MODEL=${LLM_MODEL}" >> $GITHUB_ENV
              echo "LLM_API_KEY=${OPENAI_API_KEY}" >> $GITHUB_ENV
              ;;
            openai_compat)
              # OpenHands reads LLM_* vars; we also set OPENAI_* for downstream tools
              echo "LLM_MODEL=${LLM_MODEL}" >> $GITHUB_ENV
              echo "LLM_API_KEY=${OPENAI_COMPAT_API_KEY}" >> $GITHUB_ENV
              echo "LLM_BASE_URL=${OPENAI_COMPAT_BASE_URL}" >> $GITHUB_ENV
              ;;
            grok)
              echo "LLM_MODEL=${LLM_MODEL}" >> $GITHUB_ENV
              echo "LLM_API_KEY=${GROK_API_KEY}" >> $GITHUB_ENV
              ;;
            *)
              echo "Unsupported LLM provider: ${LLM_PROVIDER}"; exit 1;;
          esac
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_COMPAT_API_KEY: ${{ secrets.OPENAI_COMPAT_API_KEY }}
          OPENAI_COMPAT_BASE_URL: ${{ secrets.OPENAI_COMPAT_BASE_URL }}
          GROK_API_KEY: ${{ secrets.GROK_API_KEY }}

      - name: Run OpenHands (headless; correct entrypoint)
        run: |
          set -euo pipefail
          echo "Running headless via uvx (python -m openhands.core.main)…"
          # OpenHands will spawn the sandbox runtime using Docker; we provide the image and mount current workspace.
          export SANDBOX_RUNTIME_CONTAINER_IMAGE="${OPENHANDS_RUNTIME_IMAGE}"
          export LOG_ALL_EVENTS=true
          # Optional hints for the agent:
          [ "${ENABLE_BROWSING}" = "true" ] && export AGENT_ENABLE_BROWSING=true || true
          # Execute from within the repo dir so it picks up config.toml and mounts the workspace correctly
          pushd "${REPO_DIR}" >/dev/null
          uvx --python 3.12 python -m openhands.core.main \
            -f "${PROMPT_FILE}" \
            -d "$(pwd)"
          popd >/dev/null

      - name: Show agent logs (if any)
        run: |
          echo "------- Agent output dir -------"
          ls -la "${AGENT_LOG_DIR}" || true

      - name: Commit changes
        working-directory: ${{ env.REPO_DIR }}
        run: |
          set -euo pipefail
          git checkout -B "${TARGET_BRANCH}"
          git add -A
          if git diff --cached --quiet; then
            echo "ℹ️ No changes to commit."
            exit 0
          fi
          git -c user.name="actions-bot" -c user.email="actions@users.noreply.github.com" \
            commit -m "OpenHands agent: apply changes from ${PROMPT_FILE}"

      - name: Push
        if: success()
        working-directory: ${{ env.REPO_DIR }}
        env:
          GIT_ASKPASS: /bin/echo
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git push --set-upstream origin "${TARGET_BRANCH}"

      - name: Open PR (when commit_mode = pr)
        if: success() && env.COMMIT_MODE == 'pr'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh pr create \
            --repo "${TARGET_REPO}" \
            --head "${TARGET_BRANCH}" \
            --base "main" \
            --title "OpenHands: ${PROMPT_FILE}" \
            --body "$(printf "Automated changes by OpenHands agent.\n\nPrompt: \`%s\`\nBrowsing: \`%s\`, Search: \`%s\`\nModel: \`%s\`" "${PROMPT_FILE}" "${ENABLE_BROWSING}" "${ENABLE_SEARCH}" "${LLM_MODEL}")" \
          || echo "ℹ️ PR may already exist or token lacks pull_request scope."

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openhands-run-${{ github.run_id }}
          path: ${{ env.AGENT_LOG_DIR }}/
          if-no-files-found: warn
