name: OpenHands

on:
  workflow_dispatch:
    inputs:
      prompt_template:
        description: "Template path (in private repo). Leave empty to use raw prompt_file."
        required: false
        default: "prompts/country-topic-template.md"

      profile_key:
        description: "Country profile key (e.g., UAE)"
        required: false
        default: "UAE"

      prompt_file:
        description: "RAW prompt path (used if template missing)"
        required: false
        default: "prompts/uae-pages.md"

      branch_name:
        description: "Target branch (created if missing)"
        required: true
        default: "agent/openhands-run"

      llm_provider:
        description: "LLM provider: openai | openai_compat | grok"
        required: true
        default: "openai"

      llm_model:
        description: "Model id (e.g., gpt-4o-mini)"
        required: true
        default: "gpt-4o-mini"

      browsing_enabled:
        description: "Enable in-agent web browsing?"
        required: true
        default: "true"

      web_search_enabled:
        description: "Enable web search?"
        required: true
        default: "true"

      commit_mode:
        description: "direct = push to branch, pr = open PR"
        required: true
        default: "pr"

jobs:
  openhands:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      # Paths
      REPO_DIR: docs_repo
      AGENT_LOG_DIR: openhands_run

      # Inputs -> env
      PROMPT_TEMPLATE: ${{ github.event.inputs.prompt_template }}
      PROFILE_KEY: ${{ github.event.inputs.profile_key }}
      RAW_PROMPT_FILE: ${{ github.event.inputs.prompt_file }}
      TARGET_BRANCH: ${{ github.event.inputs.branch_name }}
      LLM_PROVIDER: ${{ github.event.inputs.llm_provider }}
      LLM_MODEL: ${{ github.event.inputs.llm_model }}
      ENABLE_BROWSING: ${{ github.event.inputs.browsing_enabled }}
      ENABLE_SEARCH: ${{ github.event.inputs.web_search_enabled }}
      COMMIT_MODE: ${{ github.event.inputs.commit_mode }}

      # OpenHands sandbox runtime (tools/browsing env)
      SANDBOX_RUNTIME_CONTAINER_IMAGE: docker.openhands.dev/openhands/runtime:0.60-nikolaik

      # Target repo for PRs
      TARGET_REPO: familiarizeptyltd/docs.familiarize.com

    steps:
      - name: Checkout workflows repo (public)
        uses: actions/checkout@v4

      - name: Checkout docs.familiarize.com (private)
        uses: actions/checkout@v4
        with:
          repository: familiarizeptyltd/docs.familiarize.com
          path: docs_repo
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          submodules: true

      - name: Setup Python (for templating & gh)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install prompt tools
        run: |
          python -m pip install --upgrade pip
          pip install pygithub

      # ---------- Prompt: template -> .agent/rendered_prompt.md (or raw fallback) ----------
      - name: Resolve prompt (template → raw fallback)
        run: |
          set -euo pipefail

          TEMPLATE_PATH="${REPO_DIR}/${PROMPT_TEMPLATE}"
          PROFILES_NEW="${REPO_DIR}/prompts/country-profiles.json"
          PROFILES_OLD="${REPO_DIR}/prompts/country_profiles.json"
          RAW_PATH="${REPO_DIR}/${RAW_PROMPT_FILE}"

          if   [ -f "${PROFILES_NEW}" ]; then PROFILES_PATH="${PROFILES_NEW}"
          elif [ -f "${PROFILES_OLD}" ]; then PROFILES_PATH="${PROFILES_OLD}"
          else PROFILES_PATH=""
          fi

          use_template=false
          if [ -n "${PROMPT_TEMPLATE}" ] && [ -f "${TEMPLATE_PATH}" ] && [ -n "${PROFILES_PATH}" ]; then
            use_template=true
          fi

          if $use_template; then
            echo "Using template: ${TEMPLATE_PATH} (profile=${PROFILE_KEY}) with ${PROFILES_PATH}"
            python scripts/render_prompt.py \
              --profiles "${PROFILES_PATH}" \
              --profile-key "${PROFILE_KEY}" \
              --template   "${TEMPLATE_PATH}" \
              --output     "${REPO_DIR}/.agent/rendered_prompt.md"
            echo "PROMPT_FILE=.agent/rendered_prompt.md" >> "$GITHUB_ENV"
          else
            echo "Template/profiles missing. Falling back to RAW: ${RAW_PATH}"
            if [ ! -f "${RAW_PATH}" ]; then
              echo "❌ Missing inputs. Expected one of:"
              echo "  - ${TEMPLATE_PATH} AND ( ${PROFILES_NEW} OR ${PROFILES_OLD} )"
              echo "  - ${RAW_PATH}"
              exit 1
            fi
            echo "PROMPT_FILE=${RAW_PROMPT_FILE}" >> "$GITHUB_ENV"
          fi

      - name: Validate prompt path
        run: |
          set -euo pipefail
          test -f "${REPO_DIR}/${PROMPT_FILE}" || (echo "❌ Prompt not found: ${REPO_DIR}/${PROMPT_FILE}"; exit 1)

      - name: Configure Git user
        working-directory: ${{ env.REPO_DIR }}
        run: |
          git config user.name  "ci-agent"
          git config user.email "ci-agent@users.noreply.github.com"

      - name: Create/switch branch
        working-directory: ${{ env.REPO_DIR }}
        run: |
          set -euo pipefail
          if git rev-parse --verify "${TARGET_BRANCH}" >/dev/null 2>&1; then
            git checkout "${TARGET_BRANCH}"
          else
            git checkout -b "${TARGET_BRANCH}"
          fi

      # ---------- Install UV and run OpenHands via `uvx` (headless) ----------
      - name: Install uv (Astral)
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Pull sandbox runtime image (faster first run)
        run: docker pull "${SANDBOX_RUNTIME_CONTAINER_IMAGE}"

      - name: Pull OpenHands app image (CLI)
        run: docker pull docker.openhands.dev/openhands/openhands:0.60

      - name: Run OpenHands (docker headless; with Tavily search)
        env:
          # LLM secrets
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_COMPAT_API_KEY: ${{ secrets.OPENAI_COMPAT_API_KEY }}
          OPENAI_COMPAT_BASE_URL: ${{ secrets.OPENAI_COMPAT_BASE_URL }}
          GROK_API_KEY: ${{ secrets.GROK_API_KEY }}

          # Feature toggles
          OH_ENABLE_BROWSING: ${{ env.ENABLE_BROWSING }}
          OH_ENABLE_SEARCH: ${{ env.ENABLE_SEARCH }}

          # Tavily (search backend)
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}

          # Images
          SANDBOX_RUNTIME_CONTAINER_IMAGE: ${{ env.SANDBOX_RUNTIME_CONTAINER_IMAGE }}
        run: |
          set -euo pipefail

          # Map provider -> env that OpenHands reads
          case "${LLM_PROVIDER}" in
            openai)
              export LLM_PROVIDER="openai"
              export LLM_MODEL="openai/${LLM_MODEL}"    # headless likes provider/model
              export LLM_API_KEY="${OPENAI_API_KEY}"
              ;;
            openai_compat)
              export LLM_PROVIDER="openai"
              export LLM_MODEL="openai/${LLM_MODEL}"
              export LLM_API_KEY="${OPENAI_COMPAT_API_KEY}"
              export LLM_BASE_URL="${OPENAI_COMPAT_BASE_URL}"
              ;;
            grok)
              export LLM_PROVIDER="grok"
              export LLM_MODEL="${LLM_MODEL}"
              export LLM_API_KEY="${GROK_API_KEY}"
              ;;
            *)
              echo "Unsupported LLM provider: ${LLM_PROVIDER}"; exit 1;;
          esac

          # Optional browsing hint (agent chooses if/when to use browser)
          [ "${OH_ENABLE_BROWSING}" = "true" ] && export AGENT_ENABLE_BROWSING=true || true

          # Ensure goal file exists before starting container
          if [ ! -f "${REPO_DIR}/${PROMPT_FILE}" ]; then
            echo "❌ Missing goal file: ${REPO_DIR}/${PROMPT_FILE}"
            ls -la "${REPO_DIR}" || true
            exit 1
          fi

          # Host state dirs (avoid permission errors like /.openhands/.jwt_secret)
          mkdir -p "${GITHUB_WORKSPACE}/.openhands" "${AGENT_LOG_DIR}"
          chmod 0777 "${GITHUB_WORKSPACE}/.openhands" || true

          # Let app pass the mount into the runtime via env (per docs)
          export SANDBOX_VOLUMES="${GITHUB_WORKSPACE}/${REPO_DIR}:/workspace:rw"

          # Log everything via ENV (per docs) – do NOT write repo config.toml
          export LOG_ALL_EVENTS=true

          # Absolute path to the goal file inside container
          GOAL_ABS="/workspace/${PROMPT_FILE}"

          # Add a wall-clock safety timeout so jobs cannot loop forever
          # Also cap agent iterations with -i (stop condition)
          timeout 45m \
          docker run --rm \
            --pull=always \
            -e SANDBOX_RUNTIME_CONTAINER_IMAGE="${SANDBOX_RUNTIME_CONTAINER_IMAGE}" \
            -e SANDBOX_USER_ID="$(id -u)" \
            -e SANDBOX_VOLUMES="${SANDBOX_VOLUMES}" \
            -e LOG_ALL_EVENTS="${LOG_ALL_EVENTS}" \
            -e LLM_PROVIDER="${LLM_PROVIDER}" \
            -e LLM_MODEL="${LLM_MODEL}" \
            -e LLM_API_KEY="${LLM_API_KEY}" \
            -e LLM_BASE_URL="${LLM_BASE_URL:-}" \
            -e AGENT_ENABLE_BROWSING="${AGENT_ENABLE_BROWSING:-}" \
            -e OH_ENABLE_SEARCH="${OH_ENABLE_SEARCH}" \
            -e TAVILY_API_KEY="${TAVILY_API_KEY:-}" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${GITHUB_WORKSPACE}/.openhands:/.openhands" \
            -v "${GITHUB_WORKSPACE}/${AGENT_LOG_DIR}:/logs" \
            --add-host host.docker.internal:host-gateway \
            docker.openhands.dev/openhands/openhands:0.60 \
              python -m openhands.core.main \
                -f "${GOAL_ABS}" \
                -d "/workspace" \
                -i 60

      - name: Show agent outputs (if any)
        if: always()
        run: |
          echo "------- Agent output dir -------"
          ls -la "${AGENT_LOG_DIR}" || true

      - name: Commit changes (if any)
        working-directory: ${{ env.REPO_DIR }}
        run: |
          set -euo pipefail
          git add -A
          if git diff --cached --quiet; then
            echo "ℹ️ No changes to commit."
            exit 0
          fi
          git commit -m "OpenHands agent: apply changes from ${PROMPT_FILE}"

      - name: Push branch
        working-directory: ${{ env.REPO_DIR }}
        env:
          GIT_ASKPASS: /bin/echo
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          set -euo pipefail
          git push --set-upstream origin "${TARGET_BRANCH}"

      - name: Create PR (if requested)
        if: ${{ github.event.inputs.commit_mode == 'pr' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          set -euo pipefail
          gh pr create \
            --repo "${TARGET_REPO}" \
            --head "${TARGET_BRANCH}" \
            --base "main" \
            --title "OpenHands: ${PROMPT_FILE}" \
            --body "$(printf "Automated changes by OpenHands agent.\n\nPrompt: \`%s\`\nBrowsing: \`%s\`, Search: \`%s\`\nModel: \`%s/%s\`" "${PROMPT_FILE}" "${ENABLE_BROWSING}" "${ENABLE_SEARCH}" "${LLM_PROVIDER}" "${LLM_MODEL}")" \
          || echo "ℹ️ PR may already exist or token lacks PR scope."

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openhands-run-${{ github.run_id }}
          path: ${{ env.AGENT_LOG_DIR }}/
          if-no-files-found: warn
