name: KiloCode - debug run

on:
  workflow_dispatch:

jobs:
  debug-kilocode:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      # Optional: set these repo secrets to "true" for extra runner logs
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true
      # KiloCode API key stored as a repo secret
      KILOCODE_TOKEN: ${{ secrets.KILOCODE_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print runner basics
        run: |
          uname -a
          node -v
          npm -v
          echo "SHELL=$SHELL"
          env | sort | sed -e 's/\(KILOCODE_TOKEN=\).*/\1***REDACTED***/'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install KiloCode CLI
        run: |
          set -euxo pipefail
          npm install -g @kilocode/cli
          which kilocode
          kilocode --version || true

      - name: Write KiloCode config (both paths) + validate JSON
        run: |
          set -euxo pipefail
          mkdir -p ~/.kilocode/cli
          mkdir -p ~/.kilocode
          cat > ~/.kilocode/cli/config.json <<'JSON'
          {
            "version": 1,
            "currentProvider": "default",
            "providers": [
              {
                "id": "default",
                "provider": "kilocode",
                "kilocodeToken": "__KILOCODE_TOKEN__",
                "kilocodeModel": "openai/gpt-4o-mini"
              }
            ],
            "autoApproval": {
              "enabled": true,
              "read":    { "enabled": true,  "outside": false },
              "write":   { "enabled": true,  "outside": false, "protected": false },
              "execute": {
                "enabled": true,
                "allowed": ["git", "node", "npm", "pnpm"],
                "denied":  ["sudo", "rm -rf", "git push --force"]
              },
              "question": { "enabled": false, "timeout": 60 },
              "retry":    { "enabled": true,  "delay": 10 }
            }
          }
          JSON

          # mirror to legacy path as well
          cp ~/.kilocode/cli/config.json ~/.kilocode/config.json

          # inject token safely
          sed -i "s/__KILOCODE_TOKEN__/${KILOCODE_TOKEN//\//\\/}/" ~/.kilocode/cli/config.json
          sed -i "s/__KILOCODE_TOKEN__/${KILOCODE_TOKEN//\//\\/}/" ~/.kilocode/config.json

          # show where config is and that it’s valid JSON
          ls -la ~/.kilocode ~/.kilocode/cli
          sudo apt-get update -y && sudo apt-get install -y jq
          jq '.providers[0].provider, (.providers[0] | del(.kilocodeToken))' ~/.kilocode/cli/config.json
          # redact and print a preview
          awk '{gsub(/"kilocodeToken": *".*"/,"\"kilocodeToken\": \"***REDACTED***\""); print }' \
            ~/.kilocode/cli/config.json

      - name: Check KiloCode profile & balance
        env:
          KILOCODE_TOKEN: ${{ secrets.KILOCODE_API_KEY }}
        run: |
          set -euxo pipefail

          # quick sanity: token present (don’t print it)
          if [ -z "${KILOCODE_TOKEN:-}" ]; then
            echo "::error::KILOCODE_API_KEY is empty/unavailable to this workflow."
            exit 1
          fi
          echo "KILOCODE_API_KEY length: ${#KILOCODE_TOKEN}"

          sudo apt-get update -y && sudo apt-get install -y jq

          # proper Bearer authorization
          curl -fsS -i -H "Authorization: Bearer ${KILOCODE_TOKEN}" \
            https://api.kilocode.ai/api/profile \
            | tee /tmp/kc_profile.raw

          # strip headers & pretty-print JSON (fails if non-JSON)
          awk 'f{print} /^$/{f=1}' /tmp/kc_profile.raw | tee /tmp/kc_profile.json | jq .

          echo "---- balance ----"
          curl -fsS -i -H "Authorization: Bearer ${KILOCODE_TOKEN}" \
            https://api.kilocode.ai/api/profile/balance \
            | tee /tmp/kc_balance.raw

          awk 'f{print} /^$/{f=1}' /tmp/kc_balance.raw | tee /tmp/kc_balance.json | jq .

          # warn if balance looks empty
          BAL=$(jq -r '.balance // .credits // empty' /tmp/kc_balance.json || true)
          if [ -z "${BAL}" ] || [ "${BAL}" = "0" ] || [ "${BAL}" = "0.0" ]; then
            echo "::warning::KiloCode balance appears empty or unavailable (${BAL:-unset}). The CLI may exit 1."
          fi

      - name: Run KiloCode with FULL tracing
        env:
          # Common toggles some CLIs honor; harmless if ignored:
          FORCE_COLOR: "0"
          NO_COLOR: "1"
          DEBUG: "kilocode:*,axios:*"
        run: |
          set -euxo pipefail

          # Make the prompt a here-doc to avoid accidental shell quoting issues.
          cat > prompt.txt <<'PROMPT'
          Create or update a file named KILOCODE_DEMO.md at the repo root.
          Add a markdown H1 'KiloCode CLI Demo', today's UTC timestamp,
          and a short note: 'Hello from GitHub Actions.' Keep it idempotent.
          PROMPT

          # Run and capture ALL output without losing exit codes in the pipe.
          set +e
          stdbuf -oL -eL kilocode --auto --timeout 300 < prompt.txt 2>&1 | tee kilocode.log
          EXIT=$?
          set -e

          echo "----- kilocode exit code: $EXIT -----"
          if [ $EXIT -ne 0 ]; then
            echo "::error::KiloCode exited with code $EXIT"
          fi

      - name: Show log tail (if failed)
        if: ${{ failure() }}
        run: |
          echo "=== Last 200 lines of kilocode.log ==="
          tail -n 200 kilocode.log || true

      - name: Show repo diffs (whether or not it failed)
        run: |
          git status --porcelain
          git diff -- KILOCODE_DEMO.md || true

      - name: Commit and push changes (if any)
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "chore: update via KiloCode CLI (debug run)"
            git push
          else
            echo "No changes to commit."
          fi
