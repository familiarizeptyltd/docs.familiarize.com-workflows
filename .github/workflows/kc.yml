name: KC

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run on (created if missing)"
        type: string
        default: "main"
        required: true
      prompt_file:
        description: "Prompt file in repo (e.g., prompts/test_prompt.md)"
        type: string
        default: "prompts/test_prompt.md"
        required: true
      provider:
        description: "LLM provider"
        type: choice
        options:
          - kilocode_hosted        # official Kilocode provider (token+model)
          - kilocode_openai_compat # Kilocode OpenAI-compatible gateway
          - self_hosted_openai     # your OpenAI-compatible endpoint
          - xai_direct             # xAI OpenAI-compatible
          - openrouter             # OpenRouter OpenAI-compatible
        default: kilocode_hosted
        required: true
      model:
        description: "Model id (e.g., xai/grok-code-fast-1, anthropic/claude-sonnet-4.5)"
        type: string
        default: "xai/grok-code-fast-1"
        required: true
      mode:
        description: "Kilo mode (architect|code|debug|ask|orchestrator)"
        type: string
        default: "orchestrator"
        required: true
      timeout_sec:
        description: "Max seconds for Kilocode run (string)"
        type: string
        default: "1200"
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  kilo:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      TARGET_REPO: familiarizeptyltd/docs.familiarize.com
      WORKDIR: docs_repo
      BRANCH: ${{ inputs.branch }}
      PROMPT_FILE: ${{ inputs.prompt_file }}
      KILO_TIMEOUT: ${{ inputs.timeout_sec }}
      PROVIDER: ${{ inputs.provider }}
      MODEL: ${{ inputs.model }}
      MODE: ${{ inputs.mode }}

    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Checkout target repo (private)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          path: ${{ env.WORKDIR }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          submodules: true

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Kilocode CLI
        run: npm i -g @kilocode/cli

      - name: Assert HOME and XDG paths
        shell: bash
        run: |
          set -euo pipefail
          export HOME="${HOME:-/home/runner}"
          export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
          echo "HOME=$HOME"
          echo "XDG_CONFIG_HOME=$XDG_CONFIG_HOME"
          node -e "console.log('Node os.homedir() =', require('os').homedir())"

      - name: Remove legacy Kilo config files
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$HOME/.kilocode" "$XDG_CONFIG_HOME/kilocode" || true

      - name: Create config roots (HOME + XDG)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.kilocode/cli" "$HOME/.kilocode"
          mkdir -p "$XDG_CONFIG_HOME/kilocode/cli" "$XDG_CONFIG_HOME/kilocode"

      - name: Build Kilocode CLI config (providers[]; write to 4 paths)
        shell: bash
        env:
          PROVIDER: ${{ env.PROVIDER }}
          MODEL: ${{ env.MODEL }}
        run: |
          set -euo pipefail

          # Map provider envs
          case "${PROVIDER}" in
            kilocode_hosted)
              export KILOCODE_TOKEN="${{ secrets.KILOCODE_API_KEY }}"
              [ -n "${KILOCODE_TOKEN}" ] || { echo "::error::Missing secrets.KILOCODE_API_KEY"; exit 1; }
              ;;
            kilocode_openai_compat)
              export OPENAI_BASE_URL="https://kilocode.ai/api/openrouter"
              export OPENAI_API_KEY="${{ secrets.KILOCODE_API_KEY }}"
              ;;
            self_hosted_openai)
              export OPENAI_BASE_URL="${{ secrets.LLM_BASE_URL }}"
              export OPENAI_API_KEY="${{ secrets.LLM_API_KEY }}"
              ;;
            xai_direct)
              export OPENAI_BASE_URL="https://api.x.ai"
              export OPENAI_API_KEY="${{ secrets.XAI_API_KEY }}"
              ;;
            openrouter)
              export OPENAI_BASE_URL="https://openrouter.ai/api/v1"
              export OPENAI_API_KEY="${{ secrets.OPENROUTER_API_KEY }}"
              ;;
            *)
              echo "::error::Unknown provider: ${PROVIDER}"; exit 1;;
          esac

          write_cfg() {
            local path="$1"
            node -e '
              const fs = require("fs");
              const p = process.argv[1];
              const provider = process.env.PROVIDER;
              const model = process.env.MODEL;

              const autoApproval = {
                enabled: true,
                read:  { enabled: true, outside: false },
                write: { enabled: true, outside: false, protected: false },
                execute: {
                  enabled: true,
                  allowed: ["git", "node", "npm", "pnpm"],
                  denied: ["sudo", "rm -rf", "dd", "mkfs", "shutdown", "reboot", "git push --force"]
                },
                browser: { enabled: false },
                mcp: { enabled: true },
                mode: { enabled: true },
                subtasks: { enabled: true },
                question: { enabled: false, timeout: 60 },
                retry: { enabled: true, delay: 10 },
                todo: { enabled: true }
              };

              let cfg;
              if (provider === "kilocode_hosted") {
                const token = process.env.KILOCODE_TOKEN;
                if (!token) { console.error("::error::Missing secrets.KILOCODE_API_KEY"); process.exit(1); }
                cfg = {
                  version: 1,
                  currentProvider: "default",
                  providers: [
                    { id: "default", provider: "kilocode", kilocodeToken: token, kilocodeModel: model }
                  ],
                  autoApproval
                };
              } else {
                const baseUrl = process.env.OPENAI_BASE_URL;
                const apiKey  = process.env.OPENAI_API_KEY;
                if (!baseUrl) { console.error("::error::Missing base URL for OpenAI-compatible provider"); process.exit(1); }
                if (!apiKey)  { console.error("::error::Missing API key for OpenAI-compatible provider");  process.exit(1); }
                cfg = {
                  version: 1,
                  currentProvider: "default",
                  providers: [
                    { id: "default", provider: "openai-compatible", baseUrl, apiKeyEnv: "OPENAI_API_KEY", model }
                  ],
                  autoApproval
                };
              }

              if (!Array.isArray(cfg.providers)) { console.error("::error::providers must be an array"); process.exit(1); }
              if (!cfg.providers.find(p => p.id === cfg.currentProvider)) {
                console.error("::error::currentProvider must match providers[i].id"); process.exit(1);
              }

              fs.mkdirSync(require("path").dirname(p), { recursive: true });
              fs.writeFileSync(p, JSON.stringify(cfg, null, 2));
              console.log("Wrote config:", p);
            ' "$path"
          }

          # Write to all likely probe locations
          write_cfg "$HOME/.kilocode/config.json"
          write_cfg "$HOME/.kilocode/cli/config.json"
          write_cfg "$XDG_CONFIG_HOME/kilocode/config.json"
          write_cfg "$XDG_CONFIG_HOME/kilocode/cli/config.json"

          # Export OPENAI_* for run step (no-ops for kilocode_hosted)
          if [ -n "${OPENAI_BASE_URL:-}" ]; then echo "OPENAI_BASE_URL=${OPENAI_BASE_URL}" >> "$GITHUB_ENV"; fi
          if [ -n "${OPENAI_API_KEY:-}"  ]; then echo "OPENAI_API_KEY=${OPENAI_API_KEY}"   >> "$GITHUB_ENV"; fi

          # Show redacted configs
          echo "::group::Kilocode config summary"
          for p in \
            "$HOME/.kilocode/config.json" \
            "$HOME/.kilocode/cli/config.json" \
            "$XDG_CONFIG_HOME/kilocode/config.json" \
            "$XDG_CONFIG_HOME/kilocode/cli/config.json"
          do
            if [ -f "$p" ]; then
              node -e 'const fs=require("fs"),p=process.argv[1];
                const j=JSON.parse(fs.readFileSync(p,"utf8"));
                const red=JSON.stringify(j,(k,v)=>/token|key/i.test(k)?"***":v,2);
                console.log(p+"\\n"+red+"\\n");' "$p"
            fi
          done
          echo "::endgroup::"

      - name: Mark repo as safe for Git
        working-directory: ${{ env.WORKDIR }}
        run: git config --global --add safe.directory "${PWD}"

      - name: Prepare branch
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin --prune
          if git ls-remote --exit-code --heads origin "${BRANCH}" >/dev/null 2>&1; then
            echo "Using existing branch: ${BRANCH}"
            git checkout "${BRANCH}"
            git pull --ff-only origin "${BRANCH}"
          else
            echo "Creating branch from origin/main: ${BRANCH}"
            git checkout -B "${BRANCH}" origin/main || git checkout -B "${BRANCH}"
          fi

      - name: Verify prompt file exists
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          test -f "${PROMPT_FILE}" || { echo "::error::Prompt not found: ${PROMPT_FILE}"; exit 1; }
          if [ ! -s "${PROMPT_FILE}" ]; then
            echo "::error::Prompt file is empty: ${PROMPT_FILE}"; exit 1
          fi

      - name: Set non-interactive env flags
        shell: bash
        run: |
          set -euo pipefail
          echo "CI=true" >> "$GITHUB_ENV"
          echo "KILOCODE_CI=true" >> "$GITHUB_ENV"
          echo "NO_COLOR=1" >> "$GITHUB_ENV"
          echo "TERM=xterm" >> "$GITHUB_ENV"
          echo "DEBUG=kilocode:*" >> "$GITHUB_ENV"
          echo "KILOCODE_DEBUG=1" >> "$GITHUB_ENV"

      - name: Kilocode preflight (ask mode, 60s, traced)
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        env:
          NODE_OPTIONS: --trace-uncaught
        run: |
          set -euo pipefail
          echo "[mode] Use ask." | kilocode --auto --timeout "60" --workspace "${PWD}" --mode "ask" || rc=$?
          if [ -n "${rc:-}" ] && [ "${rc}" != "0" ]; then
            echo "::error::Kilocode preflight failed with code ${rc}"
            exit "${rc}"
          fi

      - name: Run Kilocode autonomously with prompt
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Provider=${PROVIDER}  Model=${MODEL}  Mode=${MODE}  Timeout=${KILO_TIMEOUT}"
          {
            echo "[mode] Use ${MODE}.";
            cat "${PROMPT_FILE}";
          } | kilocode --auto --timeout "${KILO_TIMEOUT}" --workspace "${PWD}" --mode "${MODE}" 2>&1 | tee kilocode.log || rc=$?

          if [ "${rc:-0}" = "124" ]; then
            echo "::error::Kilocode timed out after ${KILO_TIMEOUT}s"; exit 124
          elif [ -n "${rc:-}" ] && [ "${rc}" != "0" ]; then
            echo "::group::Kilocode last 200 log lines"
            tail -n 200 kilocode.log || true
            echo "::endgroup::"
            echo "::error::Kilocode exited with error code ${rc}"
            exit "${rc}"
          fi

      - name: Commit & push changes (if any)
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --no-ext-diff --quiet; then
            git add -A
            git commit -m "Kilocode (auto): ${PROMPT_FILE} via ${PROVIDER}:${MODEL} [mode=${MODE}]"
            git push origin HEAD:"${BRANCH}"
            echo "Pushed updates to ${BRANCH}."
          else
            echo "No changes produced by Kilocode."
          fi
