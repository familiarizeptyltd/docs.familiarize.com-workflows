name: KC

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run on (created if missing)"
        type: string
        default: "main"
        required: true
      prompt_file:
        description: "Prompt file in repo (e.g., prompts/test_prompt.md)"
        type: string
        default: "prompts/test_prompt.md"
        required: true
      provider:
        description: "LLM provider"
        type: choice
        options:
          - kilocode_hosted        # provider: kilocode (token+model)
          - self_hosted_openai     # provider: openai-compatible
          - xai_direct             # provider: openai-compatible
          - openrouter             # provider: openai-compatible
        default: kilocode_hosted
        required: true
      model:
        description: "Model id (e.g., xai/grok-code-fast-1, anthropic/claude-sonnet-4.5)"
        type: string
        default: "xai/grok-code-fast-1"
        required: true
      mode:
        description: "Kilo mode (architect|code|debug|ask|orchestrator)"
        type: string
        default: "orchestrator"
        required: true
      timeout_sec:
        description: "Max seconds for Kilocode run (string)"
        type: string
        default: "1200"
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  kilo:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      TARGET_REPO: familiarizeptyltd/docs.familiarize.com
      WORKDIR: docs_repo
      BRANCH: ${{ inputs.branch }}
      PROMPT_FILE: ${{ inputs.prompt_file }}
      KILO_TIMEOUT: ${{ inputs.timeout_sec }}
      PROVIDER: ${{ inputs.provider }}
      MODEL: ${{ inputs.model }}
      MODE: ${{ inputs.mode }}

    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Checkout target repo (private)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          path: ${{ env.WORKDIR }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          submodules: true

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Kilocode CLI
        run: npm i -g @kilocode/cli

      # Hard reset any old/incorrect configs so CLI doesn't read them
      - name: Remove legacy Kilo config files
        shell: bash
        run: |
          set -euo pipefail
          rm -rf ~/.kilocode || true
          mkdir -p ~/.kilocode/cli

      - name: Write Kilocode CLI config (providers[] array + auto-approvals)
        shell: bash
        run: |
          set -euo pipefail

          if [ "${PROVIDER}" = "kilocode_hosted" ]; then
            # OFFICIAL KILOCODE PROVIDER
            KILOCODE_TOKEN="${{ secrets.KILOCODE_API_KEY }}"
            if [ -z "${KILOCODE_TOKEN}" ]; then
              echo "::error::Missing secrets.KILOCODE_API_KEY"; exit 1
            fi

            cat > ~/.kilocode/cli/config.json <<EOF
{
  "version": 1,
  "currentProvider": "default",
  "providers": [
    {
      "id": "default",
      "provider": "kilocode",
      "kilocodeToken": "${KILOCODE_TOKEN}",
      "kilocodeModel": "${MODEL}"
    }
  ],
  "autoApproval": {
    "enabled": true,
    "read":  { "enabled": true, "outside": false },
    "write": { "enabled": true, "outside": false, "protected": false },
    "execute": {
      "enabled": true,
      "allowed": ["git", "node", "npm", "pnpm"],
      "denied": ["sudo", "rm -rf", "dd", "mkfs", "shutdown", "reboot", "git push --force"]
    },
    "browser": { "enabled": false },
    "mcp": { "enabled": true },
    "mode": { "enabled": true },
    "subtasks": { "enabled": true },
    "question": { "enabled": false, "timeout": 60 },
    "retry": { "enabled": true, "delay": 10 },
    "todo": { "enabled": true }
  }
}
EOF

          else
            # OPENAI-COMPATIBLE PROVIDERS
            case "${PROVIDER}" in
              self_hosted_openai)
                OPENAI_BASE_URL="${{ secrets.LLM_BASE_URL }}"
                OPENAI_API_KEY="${{ secrets.LLM_API_KEY }}"
                ;;
              xai_direct)
                OPENAI_BASE_URL="https://api.x.ai"
                OPENAI_API_KEY="${{ secrets.XAI_API_KEY }}"
                ;;
              openrouter)
                OPENAI_BASE_URL="https://openrouter.ai/api/v1"
                OPENAI_API_KEY="${{ secrets.OPENROUTER_API_KEY }}"
                ;;
              *)
                echo "::error::Unknown provider: ${PROVIDER}"; exit 1;;
            esac

            if [ -z "${OPENAI_BASE_URL}" ]; then echo "::error::Missing base URL for ${PROVIDER}"; exit 1; fi
            if [ -z "${OPENAI_API_KEY}" ]; then echo "::error::Missing API key secret for ${PROVIDER}"; exit 1; fi

            # Export for run step
            echo "OPENAI_BASE_URL=${OPENAI_BASE_URL}" >> $GITHUB_ENV
            echo "OPENAI_API_KEY=${OPENAI_API_KEY}"   >> $GITHUB_ENV

            cat > ~/.kilocode/cli/config.json <<EOF
{
  "version": 1,
  "currentProvider": "default",
  "providers": [
    {
      "id": "default",
      "provider": "openai-compatible",
      "baseUrl": "${OPENAI_BASE_URL}",
      "apiKeyEnv": "OPENAI_API_KEY",
      "model": "${MODEL}"
    }
  ],
  "autoApproval": {
    "enabled": true,
    "read":  { "enabled": true, "outside": false },
    "write": { "enabled": true, "outside": false, "protected": false },
    "execute": {
      "enabled": true,
      "allowed": ["git", "node", "npm", "pnpm"],
      "denied": ["sudo", "rm -rf", "dd", "mkfs", "shutdown", "reboot", "git push --force"]
    },
    "browser": { "enabled": false },
    "mcp": { "enabled": true },
    "mode": { "enabled": true },
    "subtasks": { "enabled": true },
    "question": { "enabled": false, "timeout": 60 },
    "retry": { "enabled": true, "delay": 10 },
    "todo": { "enabled": true }
  }
}
EOF
          fi

          echo "=== ~/.kilocode/cli/config.json ==="
          cat ~/.kilocode/cli/config.json
          echo "=================================="

      - name: Mark repo as safe for Git
        working-directory: ${{ env.WORKDIR }}
        run: git config --global --add safe.directory "${PWD}"

      - name: Prepare branch
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin --prune
          if git ls-remote --exit-code --heads origin "${BRANCH}" >/dev/null 2>&1; then
            git checkout "${BRANCH}"
            git pull --ff-only origin "${BRANCH}"
          else
            git checkout -B "${BRANCH}" origin/main || git checkout -B "${BRANCH}"
          fi

      - name: Verify prompt file exists
        working-directory: ${{ env.WORKDIR }}
        run: |
          test -f "${PROMPT_FILE}" || { echo "::error::Prompt not found: ${PROMPT_FILE}"; exit 1; }

      - name: Set non-interactive env flags
        run: |
          echo "CI=true" >> $GITHUB_ENV
          echo "KILOCODE_CI=true" >> $GITHUB_ENV
          echo "NO_COLOR=1" >> $GITHUB_ENV
          echo "TERM=xterm" >> $GITHUB_ENV
          echo "DEBUG=kilocode:*" >> $GITHUB_ENV
          echo "KILOCODE_DEBUG=1" >> $GITHUB_ENV

      # Quick smoke test to ensure config is parseable before long run
      - name: Kilocode preflight (ask mode, 60s)
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "[mode] Use ask." | kilocode --auto --timeout "60" --workspace "${PWD}" --mode "ask" || rc=$?
          if [ -n "${rc:-}" ] && [ "${rc}" != "0" ]; then
            echo "::error::Kilocode preflight failed with code ${rc}"
            exit "${rc}"
          fi

      - name: Run Kilocode autonomously with prompt
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Provider=${PROVIDER}  Model=${MODEL}  Mode=${MODE}  Timeout=${KILO_TIMEOUT}"
          {
            echo "[mode] Use ${MODE}.";
            cat "${PROMPT_FILE}";
          } | kilocode --auto --timeout "${KILO_TIMEOUT}" --workspace "${PWD}" --mode "${MODE}" || rc=$?

          if [ "${rc:-0}" = "124" ]; then
            echo "::error::Kilocode timed out after ${KILO_TIMEOUT}s"; exit 124
          elif [ -n "${rc:-}" ] && [ "${rc}" != "0" ]; then
            echo "::error::Kilocode exited with error code ${rc}"; exit "${rc}"
          fi

      - name: Commit & push changes (if any)
        working-directory: ${{ env.WORKDIR }}
        run: |
          set -euo pipefail
          if ! git diff --no-ext-diff --quiet; then
            git add -A
            git commit -m "Kilocode (auto): ${PROMPT_FILE} via ${PROVIDER}:${MODEL} [mode=${MODE}]"
            git push origin HEAD:"${BRANCH}"
            echo "Pushed updates to ${BRANCH}."
          else
            echo "No changes produced by Kilocode."
          fi
