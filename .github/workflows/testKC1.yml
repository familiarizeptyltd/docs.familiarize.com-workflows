name: KiloCode - headless demo

on:
  workflow_dispatch:

jobs:
  demo:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      KILOCODE_TOKEN: ${{ secrets.KILOCODE_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Basics
        run: |
          set -euxo pipefail
          node -v
          npm -v

      - name: Install KiloCode CLI
        run: |
          set -euxo pipefail
          npm install -g @kilocode/cli
          kilocode --version || true

      - name: Configure KiloCode (non-interactive; enable writes)
        run: |
          set -euxo pipefail
          mkdir -p ~/.kilocode/cli ~/.kilocode
          cat > ~/.kilocode/cli/config.json <<'JSON'
          {
            "version": 1,
            "currentProvider": "default",
            "providers": [
              {
                "id": "default",
                "provider": "kilocode",
                "kilocodeToken": "__KILOCODE_TOKEN__",
                "kilocodeModel": "openai/gpt-4o-mini"
              }
            ],
            "autoApproval": {
              "enabled": true,
              "read":    { "enabled": true,  "outside": false },
              "write":   { "enabled": true,  "outside": false, "protected": false },
              "execute": { "enabled": false, "allowed": [], "denied": [] },
              "question": { "enabled": false, "timeout": 30 },
              "retry":    { "enabled": true,  "delay": 5 }
            }
          }
          JSON
          cp ~/.kilocode/cli/config.json ~/.kilocode/config.json
          sed -i "s/__KILOCODE_TOKEN__/${KILOCODE_TOKEN//\//\\/}/" ~/.kilocode/cli/config.json ~/.kilocode/config.json
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          jq '(.providers[0].kilocodeToken)="***REDACTED***"' ~/.kilocode/cli/config.json

      - name: Verify profile & balance (Bearer)
        run: |
          set -euxo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
          curl -fsS -H "Authorization: Bearer ${KILOCODE_TOKEN}" https://api.kilocode.ai/api/profile | jq .
          curl -fsS -H "Authorization: Bearer ${KILOCODE_TOKEN}" https://api.kilocode.ai/api/profile/balance | jq .

      - name: Try KiloCode to WRITE the file
        env:
          TERM: xterm-256color
          CI: "true"
          NO_COLOR: "1"
          KILOCODE_HEADLESS: "1"
          KILOCODE_NONINTERACTIVE: "1"
          DEBUG: "kilocode:*,axios:*"
        run: |
          set -euxo pipefail
          # Ask KiloCode to create/update the file directly (since writes are enabled).
          cat > prompt.txt <<'PROMPT'
          Create or update a file named KILOCODE_DEMO.md at the repo root.
          The content must be exactly:
          # KiloCode CLI Demo
          {{UTC_NOW}}
          Hello from GitHub Actions.
          PROMPT

          PROMPT_ARG="$(tr '\n' ' ' < prompt.txt)"

          # Strategy: pass prompt as arg; banner-only exit is tolerated
          set +e
          kilocode --auto "${PROMPT_ARG}" --timeout 300 2>&1 | tee kilocode.log
          EXIT=$?
          set -e
          echo "kilocode exit code: $EXIT || continuing to check for file"

          # If CLI succeeded, the file should exist; otherwise we fall back next step
          if [ -f KILOCODE_DEMO.md ]; then
            echo "::notice::KiloCode created KILOCODE_DEMO.md"
          else
            echo "::warning::KiloCode did not create the file; will synthesize it in fallback."
          fi

      - name: Fallback (synthesize file if CLI didnâ€™t write it)
        run: |
          set -euxo pipefail
          if [ ! -f KILOCODE_DEMO.md ]; then
            UTC_NOW="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            {
              echo "# KiloCode CLI Demo"
              echo "${UTC_NOW}"
              echo "Hello from GitHub Actions."
            } > KILOCODE_DEMO.md
            echo "::notice::Wrote KILOCODE_DEMO.md via fallback."
          fi
          echo "Preview:"
          head -n 20 KILOCODE_DEMO.md

      - name: Commit & push if changed
        run: |
          set -euxo pipefail
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add KILOCODE_DEMO.md
            git commit -m "chore: add/update KILOCODE_DEMO.md (CLI headless demo)"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Attach KiloCode logs (artifact)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: kilocode-log
          path: kilocode.log
